import sys

def read_grammar(grammar_file):
	'''
	Opens and parses the given grammar file. It gives the terminal as the key
	and the rules as the values. It strips on whitespace, "->", and "|". It is not
	sensitive to ";" or ":". 

	It uses the sliding window technique
	'''
	grammar = {}
	with open(grammar_file) as f:
		for line in f:
			lhs, rhs = line.strip().split("->")
			rhs = rhs.split("|")
			rhs = [rule.strip().split(" ") for rule in rhs]
			if lhs in grammar:
				grammar[lhs].extend(rhs)
			else:
				grammar[lhs] = rhs
	return grammar


def grammar_parse(word, grammar):
	''' 
	Parses the word usiing the given grammar. This is the CKY algorithm.
	It uses a 2D list that is initialized with diagonal values and empty sets.
	'''
	length = len(word)

	# Create a 2D list to represent the table, initialized with empty sets
	table = []
	for i in range(length):
		row = []
		for j in range(length):
			row.append(set())
		table.append(row)

	# fill out the table using the CKY algorithm
	for i in range(0, length):
		# adds rules using the window 
		for lhs, rule in grammar.items():
			for rhs in rule:
				if len(rhs) == 1 and rhs[0] == word[i]:
					# tests if terminal
					table[i][i].add(lhs)

		for i in range(i, -1, -1):
			for k in range(j, i + 1):	
				for lhs, rule in grammar.items():
					for rhs in rule:
						# checks if accepted by terminal
						if len(rhs) == 2 and rhs[0] in table[j][k] and rhs[1] in table[k + 1][i]:
							T[j][i].add(lhs)

	# tests if any terminals were accepted, which means string can be parsed
	if len(table[0][length-1]) != 0:
		#print("True")
		return True
	else:
		#print("False")
		return False


def main(grammar_file, string_file):	
	# Read the grammar
	R = read_grammar(grammar_file)

	# Read the string
	with open(string_file) as f:
		w = f.readline().strip()
	#print(w)

	# Parse the string using the CYK algorithm
	result = grammar_parse(w, R)
	#print(result)
	# Print the result
	
	# outputs result. Can comment out if you do not want a terminal response
	if result == True:
		print("True! The string CAN be generated by the grammar.")
	else:
		print("False! The string CANNOT be generated by the grammar.")


if __name__ == '__main__':
	import argparse

	if len(sys.argv) != 3:
		print('USAGE: python3 parser.py grammar_file string_file')
		sys.exit(1)

	# gives user information for program use
	parser = argparse.ArgumentParser(description='CYK parser for a given grammar and string')
	parser.add_argument('grammar', type=str, help='Path to grammar file in Doty parser syntax')
	parser.add_argument('string', type=str, help='Path to string file in Chomsky normal form')
	args = parser.parse_args()
	
	main(args.grammar, args.string)
